{"version":3,"sources":["../../../src/Buttons/IconButton/IconButton.js"],"names":["IconButton","muiTheme","props","theme","muiProps","icon","badgeProps","renderIcon","sourceMuiProps","sourceQflProps","qflProps","componentName","renderedContent","badged","renderBadgedIcon","propTypes","bool","object","node","childContextTypes","PropTypes","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAKA;;AAEA;;;;AAEA;;;IAGMA,U;;;AA4BF,0BAAc;AAAA;AAAA;AAEb;;;;0CAEiB;AACd,mBAAO;AACHC,0BAAU,yBAAY,KAAKC,KAAL,CAAWC,KAAvB;AADP,aAAP;AAGH;;;mCAEUC,Q,EAAU;AACjB,mBACI;AAAA;AAAmBA,wBAAnB;AACK,qBAAKF,KAAL,CAAWG;AADhB,aADJ;AAKH;;;2CAEkB;AACf,mBACI;AAAA;AAAc,qBAAKH,KAAL,CAAWI,UAAzB;AACK,qBAAKC,UAAL;AADL,aADJ;AAMH;;;iCAEQ;AAAA,8BAC0B,8BAAW;AACtCJ,uBAAO,KAAKD,KAAL,CAAWC,KADoB;AAEtCK,gCAAgB,KAAKN,KAAL,CAAWE,QAFW;AAGtCK,gCAAgB,KAAKP,KAAL,CAAWQ,QAHW;AAItCC,+BAAe;AAJuB,aAAX,CAD1B;AAAA,gBACGP,QADH,eACGA,QADH;AAAA,gBACaM,QADb,eACaA,QADb;;AAQL,gBAAIE,kBAAkB,KAAKL,UAAL,CAAgBH,QAAhB,CAAtB;AACA,gBAAI,KAAKF,KAAL,CAAWW,MAAf,EAAuB;AACnBD,kCAAkB,KAAKE,gBAAL,EAAlB;AACH;AACD,mBACI;AAAA;AAASJ,wBAAT;AACKE;AADL,aADJ;AAKH;;;4BAvEMG,S,GAAY;AACf;;;AAGAF,YAAQ,iBAAUG,IAJH;AAKf;;;AAGAV,gBAAY,iBAAUW,MARP;AASf;;;AAGAZ,UAAM,iBAAUa,IAZD;AAaf;;;AAGAf,WAAO,iBAAUc,MAhBF;AAiBf;;;AAGAb,cAAU,iBAAUa,MApBL;AAqBf;;;AAGAP,cAAU,iBAAUO;AAxBL,C;;;AA0EvBjB,WAAWmB,iBAAX,GAA+B;AAC3BlB,cAAU,gBAAMmB,SAAN,CAAgBH;AADC,CAA/B;;AAIAjB,WAAWqB,YAAX,GAA0B;AACtBR,YAAQ,KADc;AAEtBV,WAAO,SAFe;AAGtBE,UAAM,IAHgB;AAItBD,cAAU,EAJY;AAKtBM,cAAU,EALY;AAMtBJ,gBAAY;AANU,CAA1B;;kBASeN,U","file":"IconButton.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport {\n    IconButton as MUIIconButton,\n    Badge as MUIBadge\n} from 'material-ui';\n\nimport { buildTheme } from '../../themeBuilder';\n\nimport { getMuiTheme } from 'material-ui/styles';\n\n/**\n * Material UI based icon button\n */\nclass IconButton extends Component {\n    static propTypes = {\n        /**\n         * Pushed as children to MaterialUI component.\n         */\n        badged: PropTypes.bool,\n        /**\n         * Forwarded to MaterialUI badge component.\n         */\n        badgeProps: PropTypes.object,\n        /**\n         * Pushed as children to MaterialUI component. Use this for the Icon\n         */\n        icon: PropTypes.node,\n        /**\n         * Applies a given MaterialUI theme.\n         */\n        theme: PropTypes.object,\n        /**\n         * Forwarded to MaterialUI component.\n         */\n        muiProps: PropTypes.object,\n        /**\n         * Forwarded to wrapper component.\n         */\n        qflProps: PropTypes.object\n    };\n\n    constructor() {\n        super();\n    }\n\n    getChildContext() {\n        return {\n            muiTheme: getMuiTheme(this.props.theme)\n        };\n    }\n    \n    renderIcon(muiProps) {\n        return (\n            <MUIIconButton {...muiProps}>\n                {this.props.icon}\n            </MUIIconButton>\n        );\n    }\n\n    renderBadgedIcon() {\n        return (\n            <MUIBadge {...this.props.badgeProps}>\n                {this.renderIcon()}\n            </MUIBadge>\n            \n        );\n    }\n\n    render() {\n        const { muiProps, qflProps } = buildTheme({\n            theme: this.props.theme,\n            sourceMuiProps: this.props.muiProps,\n            sourceQflProps: this.props.qflProps,\n            componentName: 'IconButton'\n        });\n\n        let renderedContent = this.renderIcon(muiProps);\n        if (this.props.badged) {\n            renderedContent = this.renderBadgedIcon();\n        }\n        return (\n            <div {...qflProps}>\n                {renderedContent}\n            </div>\n        );\n    }\n}\n\nIconButton.childContextTypes = {\n    muiTheme: React.PropTypes.object\n};\n\nIconButton.defaultProps = {\n    badged: false,\n    theme: 'Default',\n    icon: null,\n    muiProps: {},\n    qflProps: {},\n    badgeProps: {}\n};\n\nexport default IconButton;\n"]}
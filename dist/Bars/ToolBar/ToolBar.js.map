{"version":3,"sources":["../../../src/Bars/ToolBar/ToolBar.js"],"names":["ToolBar","muiTheme","props","theme","sourceMuiProps","muiProps","sourceQflProps","qflProps","componentName","items","children","propTypes","node","object","childContextTypes","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AAEA;;AAEA;;;;AAEA;;;IAGMA,O;;;AAwBF,uBAAc;AAAA;AAAA;AAEb;;;;0CAEiB;AACd,mBAAO;AACHC,0BAAU,yBAAY,KAAKC,KAAL,CAAWC,KAAvB;AADP,aAAP;AAGH;;;iCAEQ;AAAA,8BAC0B,8BAAW;AACtCA,uBAAO,KAAKD,KAAL,CAAWC,KADoB;AAEtCC,gCAAgB,KAAKF,KAAL,CAAWG,QAFW;AAGtCC,gCAAgB,KAAKJ,KAAL,CAAWK,QAHW;AAItCC,+BAAe;AAJuB,aAAX,CAD1B;AAAA,gBACGH,QADH,eACGA,QADH;AAAA,gBACaE,QADb,eACaA,QADb;;AAQL,gBAAIE,QAAQ,KAAKP,KAAL,CAAWQ,QAAvB;AACA,gBAAI,KAAKR,KAAL,CAAWO,KAAf,EAAsB;AAClBA,wBAAQ,KAAKP,KAAL,CAAWO,KAAnB;AACH;;AAED,mBACI;AAAA;AAASF,wBAAT;AACI;AAAA;AAAgBF,4BAAhB;AACKI;AADL;AADJ,aADJ;AAOH;;;4BArDME,S,GAAY;AACf;;;AAGAF,WAAO,oBAAUG,IAJF;AAKf;;;AAGAF,cAAU,oBAAUE,IARL;AASf;;;AAGAT,WAAO,oBAAUU,MAZF;AAaf;;;AAGAR,cAAU,oBAAUQ,MAhBL;AAiBf;;;AAGAN,cAAU,oBAAUM;AApBL,C;;;AAwDvBb,QAAQc,iBAAR,GAA4B;AACxBb,cAAU,oBAAUY;AADI,CAA5B;;AAIAb,QAAQe,YAAR,GAAuB;AACnBZ,WAAO,SADY;AAEnBE,cAAU,EAFS;AAGnBE,cAAU;AAHS,CAAvB;;kBAMeP,O","file":"ToolBar.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Toolbar as MUIToolBar } from 'material-ui/Toolbar';\n\nimport { buildTheme } from '../../themeBuilder';\n\nimport { getMuiTheme } from 'material-ui/styles';\n\n/**\n * Material UI based tool bar\n */\nclass ToolBar extends Component {\n    static propTypes = {\n        /**\n         * Pushed as children to MaterialUI component. Use this for ToolbarGroups\n         */\n        items: PropTypes.node,\n        /**\n         * Pushed as children to MaterialUI component. Can also be used for ToolbarGroups\n         */\n        children: PropTypes.node,\n        /**\n         * Applies a given MaterialUI theme.\n         */\n        theme: PropTypes.object,\n        /**\n         * Forwarded to MaterialUI component.\n         */\n        muiProps: PropTypes.object,\n        /**\n         * Forwarded to wrapper component.\n         */\n        qflProps: PropTypes.object\n    };\n\n    constructor() {\n        super();\n    }\n\n    getChildContext() {\n        return {\n            muiTheme: getMuiTheme(this.props.theme)\n        };\n    }\n\n    render() {\n        const { muiProps, qflProps } = buildTheme({\n            theme: this.props.theme,\n            sourceMuiProps: this.props.muiProps,\n            sourceQflProps: this.props.qflProps,\n            componentName: 'ToolBar'\n        });\n\n        let items = this.props.children;\n        if (this.props.items) {\n            items = this.props.items;\n        }\n\n        return (\n            <div {...qflProps}>\n                <MUIToolBar {...muiProps}>\n                    {items}\n                </MUIToolBar>\n            </div>\n        );\n    }\n}\n\nToolBar.childContextTypes = {\n    muiTheme: PropTypes.object\n};\n\nToolBar.defaultProps = {\n    theme: 'Default',\n    muiProps: {},\n    qflProps: {}\n};\n\nexport default ToolBar;\n"]}
{"version":3,"sources":["../../../src/Bars/NavigationBar/NavigationBar.js"],"names":["SelectableList","NavigationBar","muiTheme","props","theme","e","route","onChange","sourceMuiProps","muiProps","sourceQflProps","qflProps","componentName","listMuiProps","dividerMuiProps","listItemMuiProps","location","renderedMenu","menuItems","hideBarFill","push","type","map","item","idx","nestedElements","nestedItems","className","pathname","handleOnChange","nestedElement","nestedIdx","label","path","icon","filter","barFillStyle","propTypes","object","isRequired","array","func","bool","childContextTypes","PropTypes","defaultProps"],"mappings":"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","file":"NavigationBar.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport { Drawer as MUIDrawer, Divider} from 'material-ui';\n\nimport { buildTheme } from '../../themeBuilder';\nimport { getMuiTheme } from 'material-ui/styles';\n\nimport { List, ListItem, makeSelectable } from 'material-ui/List';\nconst SelectableList = makeSelectable(List);\n\n/**\n * Material UI based tool bar\n */\nclass NavigationBar extends Component {\n    static propTypes = {\n        /**\n         * Location for selecting the right item based on route\n         */\n        location: PropTypes.object.isRequired,\n        /**\n         * Pushed to MaterialUI component. Use this for setup menu\n         */\n        menuItems: PropTypes.array.isRequired,\n        /**\n         * Fires when list item is clicked\n         */\n        onChange: PropTypes.func.isRequired,\n        /**\n         * Applies a given MaterialUI theme.\n         */\n        theme: PropTypes.object,\n        /**\n         * Forwarded to MaterialUI component.\n         */\n        muiProps: PropTypes.object,\n        /**\n         * Forwarded to wrapper component.\n         */\n        qflProps: PropTypes.object,\n        listMuiProps: PropTypes.object,\n        dividerMuiProps: PropTypes.object,\n        listItemMuiProps: PropTypes.object,\n        hideBarFill: PropTypes.bool\n    };\n\n    static childContextTypes = {\n        muiTheme: React.PropTypes.object\n    };\n\n    static defaultProps = {\n        theme: 'Default',\n        muiProps: {},\n        qflProps: {}\n    };\n\n    constructor() {\n        super();\n    }\n\n    getChildContext() {\n        return {\n            muiTheme: getMuiTheme(this.props.theme)\n        };\n    }\n\n    handleOnChange(e, route) {\n        if (this.props.onChange) {\n            this.props.onChange(e, route);\n        }\n    }\n\n    render() {\n        const { muiProps, qflProps } = buildTheme({\n            theme: this.props.theme,\n            sourceMuiProps: this.props.muiProps,\n            sourceQflProps: this.props.qflProps,\n            componentName: 'NavigationBar'\n        });\n\n        const listMuiProps = buildTheme({\n            theme: this.props.theme,\n            sourceMuiProps: this.props.listMuiProps || {},\n            componentName: 'List'\n        }).muiProps;\n\n        const dividerMuiProps = buildTheme({\n            theme: this.props.theme,\n            sourceMuiProps: this.props.dividerMuiProps || {},\n            componentName: 'Divider'\n        }).muiProps;\n\n        const listItemMuiProps = buildTheme({\n            theme: this.props.theme,\n            sourceMuiProps: this.props.listItemMuiProps || {},\n            componentName: 'ListItem'\n        }).muiProps;\n\n        const { location } = this.props;\n\n        let renderedMenu = null;\n        if (this.props.menuItems) {\n            if (!this.props.hideBarFill) {\n                this.props.menuItems.push({\n                    type: 'fillBar'\n                });\n            }\n            renderedMenu = this.props.menuItems.map((item, idx) => {\n                switch (item.type) {\n                    case 'List':\n                        const nestedElements = (item.nestedItems || []);\n                        return (\n                            <SelectableList\n                                key={idx}\n                                className={item.className}\n                                value={location.pathname}\n                                onChange={(e, route) => this.handleOnChange(e, route)}\n                                {...listMuiProps}\n                            >\n                                {nestedElements.map((nestedElement, nestedIdx) => {\n                                    switch (nestedElement.type) {\n                                        case 'ListItem':\n                                            return <ListItem\n                                                       key={nestedIdx}\n                                                       {...listItemMuiProps}\n                                                       className={nestedElement.className}\n                                                       primaryText={nestedElement.label}\n                                                       value={nestedElement.path}\n                                                       leftIcon={nestedElement.icon}\n                                            />;\n                                        default:\n                                            return null;\n                                    }\n                                }).filter((item) => (item !== null))}\n                            </SelectableList>\n                        );\n                    case 'Divider':\n                        return <Divider key={idx} {...dividerMuiProps}/>;\n                    case 'fillBar':\n                        return <div key={idx} style={qflProps.barFillStyle}/>;\n                    default:\n                        return null;\n                }\n            }).filter((item) => (item !== null));\n        }\n\n        return (\n            <div {...qflProps}>\n                <MUIDrawer {...muiProps} open={true} docked={true}>\n                    {renderedMenu}\n                </MUIDrawer>\n            </div>\n        );\n    }\n}\n\nexport default NavigationBar;\n"]}
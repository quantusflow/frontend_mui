{"version":3,"sources":["../../../src/InputForms/Form/Form.js"],"names":["Form","props","item","state","formData","muiTheme","theme","key","keyAttributeName","items","hasOwnProperty","result","foundInItems","i","length","value","match","compareValue","type","oldValue","newValue","choosenElement","element","curFormData","mapValue","setState","onChange","sourceMuiProps","muiProps","sourceQflProps","qflProps","componentName","layout","resultingElement","dropDownCount","map","idx","getElement","itemWidth","tabIndex","isMostLeft","isMostRight","initialValue","getFormItemValue","currentValue","undefined","setTimeout","event","handleFormItemChange","label","style","display","width","nullable","index","name","defaultSelected","radioBoxItem","radioBoxIdx","marginRight","marginLeft","radioButtonMuiProps","dataProvider","dropDownItem","dropDownItemIdx","paddingRight","paddingLeft","floatingLabelText","tabindex","isMultiple","Array","isArray","subItem","subIdx","paddingTop","propTypes","object","array","string","func","childContextTypes","PropTypes","defaultProps"],"mappings":"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","file":"Form.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\n\nimport { TextField, RadioBox, DropDown, CheckBox, DatePicker, AutoComplete, Stepper } from '../../';\nimport { RadioButton, MenuItem } from 'material-ui';\n\nimport CheckedIcon from 'material-ui/svg-icons/toggle/radio-button-checked';\nimport UncheckedIcon from 'material-ui/svg-icons/toggle/radio-button-unchecked';\n\nimport { buildTheme } from '../../themeBuilder';\n\nimport { getMuiTheme } from 'material-ui/styles';\n\n/**\n * Material UI based text field\n */\nclass Form extends Component {\n    static propTypes = {\n        /**\n         * Applies a given MaterialUI theme.\n         */\n        theme: PropTypes.object,\n        /**\n         * Forwarded to wrapper component.\n         */\n        qflProps: PropTypes.object,\n        /**\n         * Setup of the shown form items.\n         */\n        layout: PropTypes.array,\n        /**\n         * Item holding form data (entity).\n         */\n        item: PropTypes.object,\n        /**\n         * Defines the name of the primary key attribute of the item.\n         */\n        keyAttributeName: PropTypes.string,\n        /**\n         * A function returning a map of dataproviders for list based selections (e.g. DropDowns)\n         */\n        dataProvider: PropTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        const item = (props.item || {});\n        this.state = {\n            formData: item\n        }\n    }\n\n    getChildContext() {\n        return {\n            muiTheme: getMuiTheme(this.props.theme)\n        };\n    }\n\n    getFormItemValue(key, keyAttributeName, items) {\n        if (!keyAttributeName && this.props.item && this.props.item.hasOwnProperty(key)) {\n            let result = this.props.item[key];\n            if (items) {\n                // Try to find result as value in items\n                let foundInItems = false;\n                for (let i=0;i<items.length;i++) {\n                    if (items[i].value === result) {\n                        foundInItems = true;\n                        break;\n                    }\n                }\n                if (!foundInItems) {\n                    for (let i=0;i<items.length;i++) {\n                        let match = false;\n                        if (items[i].compareValue && (match = items[i].compareValue(result))) {\n                            result = items[i].value;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        } else if (keyAttributeName && this.props.item && this.props.item.hasOwnProperty(key)) {\n          if (this.props.item[key] && this.props.item[key][keyAttributeName]) {\n            return this.props.item[key][keyAttributeName];\n          } else {\n            return \"not_choosen\"\n          }\n        } else if (!keyAttributeName && this.state.formData && this.state.formData.hasOwnProperty(key)) {\n            let result = this.state.formData[key];\n            if (items) {\n                // Try to find result as value in items\n                let foundInItems = false;\n                for (let i=0;i<items.length;i++) {\n                    if (items[i].value === result) {\n                        foundInItems = true;\n                        break;\n                    }\n                }\n                if (!foundInItems) {\n                    for (let i=0;i<items.length;i++) {\n                        let match = false;\n                        if (items[i].compareValue && (match = items[i].compareValue(result))) {\n                            result = items[i].value;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        } else if (keyAttributeName && this.state.formData && this.state.formData.hasOwnProperty(key)) {\n            return this.state.formData[key][keyAttributeName];\n        }\n    }\n\n\n    handleFormItemChange(type, key, oldValue, newValue, choosenElement, element) {\n        const curFormData = this.state.formData;\n        if (element && element.hasOwnProperty('keyAttributeName')) {\n            curFormData[key] = {};\n            curFormData[key][element.keyAttributeName] = newValue;\n        } else {\n            curFormData[key] = (choosenElement && choosenElement.mapValue && typeof choosenElement.mapValue === 'function' ? choosenElement.mapValue() : newValue);\n        }\n\n        this.setState({\n            formData: curFormData\n        });\n        if (this.props.onChange) {\n            this.props.onChange(this.state.formData, {\n                type,\n                key,\n                oldValue,\n                newValue\n            });\n        }\n    }\n\n    render() {\n        const { qflProps } = buildTheme({\n            theme: this.props.theme,\n            sourceMuiProps: this.props.muiProps,\n            sourceQflProps: this.props.qflProps,\n            componentName: 'Form'\n        });\n\n        const { layout, item, keyAttributeName } = this.props;\n\n        let resultingElement = null;\n        if (layout && layout.length > 0) {\n            let dropDownCount = 0;\n            resultingElement = layout.map((item, idx) => {\n                const getElement = (element, itemWidth, tabIndex, isMostLeft, isMostRight) => {\n                    let resultingElement = null;\n                    switch (element.type) {\n                        case 'CheckBox':\n                            const initialValue = (element.hasOwnProperty('initialValue') && element.initialValue !== null ? element.initialValue : this.getFormItemValue(element.key));\n\n                            let currentValue = this.getFormItemValue(element.key);\n                            if (currentValue === undefined) {\n                                currentValue = initialValue;\n                                if (!this.props.item) {\n                                    const curFormData = this.state.formData;\n                                    if (curFormData[element.key] !== initialValue) {\n                                        curFormData[element.key] = initialValue;\n                                        setTimeout(() => {\n                                            this.setState({\n                                                formData: curFormData\n                                            }, () => {\n                                                if (this.props.onChange) {\n                                                    this.props.onChange(this.state.formData);\n                                                }\n                                            })\n                                        }, 0);\n                                    }\n                                }\n                            }\n\n                            resultingElement = (\n                                <CheckBox\n                                    key={element.key}\n                                    theme={element.theme}\n                                    value={currentValue}\n                                    onChange={(event, oldValue, newValue) => this.handleFormItemChange('CheckBox', element.key, oldValue, newValue)}\n                                    muiProps={{\n                                        label: element.label,\n                                        ...element.muiProps\n                                    }}\n                                    qflProps={{\n                                        style: {\n                                            display: 'inline-block',\n                                            width: itemWidth + '%'\n                                        },\n                                        ...element.qflProps\n                                    }}\n                                />\n                            );\n\n                            break;\n                        case 'RadioBox':\n                            if (element.items && element.items.length > 0) {\n                                const initialValue = (element.hasOwnProperty('initialValue') && element.initialValue !== null ? element.initialValue : (!element.nullable ? element.items[0].value : null));\n\n                                let currentValue = this.getFormItemValue(element.key);\n                                if (currentValue === undefined) {\n                                    currentValue = initialValue;\n                                    if (!this.props.item) {\n                                        const curFormData = this.state.formData;\n                                        if (curFormData[element.key] !== initialValue) {\n                                            curFormData[element.key] = initialValue;\n                                            setTimeout(() => {\n                                                this.setState({\n                                                    formData: curFormData\n                                                }, () => {\n                                                    if (this.props.onChange) {\n                                                        this.props.onChange(this.state.formData);\n                                                    }\n                                                })\n                                            }, 0);\n                                        }\n                                    }\n                                }\n\n                                resultingElement = (\n                                    <RadioBox\n                                        key={element.key}\n                                        value={currentValue}\n                                        label={element.label}\n                                        theme={element.theme}\n                                        onChange={(event, index, oldValue, newValue) => this.handleFormItemChange('RadioBox', element.key, oldValue, newValue, element.items[index], element)}\n                                        muiProps={{\n                                            name: element.key,\n                                            defaultSelected: initialValue,\n                                            ...element.muiProps\n                                        }}\n                                        qflProps={{\n                                            style: {\n                                                display: 'inline-block',\n                                                width: itemWidth + '%'\n                                            },\n                                            ...element.qflProps\n                                        }}\n                                    >\n                                        {element.items.map((radioBoxItem, radioBoxIdx) => <RadioButton\n                                            key={element.key + '-' + radioBoxIdx}\n                                            style={{\n                                                width: '50%',\n                                                display: 'inline-block'\n                                            }}\n                                            iconStyle={{\n                                                marginRight: '8px',\n                                                marginLeft: (isMostLeft ? '0px' : '2px')\n                                            }}\n                                            value={radioBoxItem.value}\n                                            label={radioBoxItem.label}\n                                            checkedIcon={<CheckedIcon/>}\n                                            uncheckedIcon={<UncheckedIcon/>}\n                                            {...element.radioButtonMuiProps}\n                                        />)}\n                                    </RadioBox>\n                                );\n                            }\n                            break;\n                        case 'DropDown':\n                            if (element.items && element.items.length > 0) {\n                                const initialValue = element.initialValue;\n\n                                let currentValue = this.getFormItemValue(element.key, element.keyAttributeName, element.items);\n                                if (currentValue === undefined) {\n                                    currentValue = initialValue;\n                                    if (!this.props.item) {\n                                        const curFormData = this.state.formData;\n                                        if (curFormData[element.key] !== initialValue) {\n                                            curFormData[element.key] = initialValue;\n                                            setTimeout(() => {\n                                                this.setState({\n                                                    formData: curFormData\n                                                }, () => {\n                                                    if (this.props.onChange) {\n                                                        this.props.onChange(this.state.formData);\n                                                    }\n                                                })\n                                            }, 0);\n                                        }\n                                    }\n                                }\n\n                                let items = null;\n                                if (element.items && typeof element.items === 'function') {\n                                    items = [];\n                                    let dataProvider = {};\n                                    if (this.props.dataProvider && typeof this.props.dataProvider === 'function' && (dataProvider = this.props.dataProvider()).hasOwnProperty(element.key) && dataProvider[element.key]) {\n                                        items = element.items(dataProvider[element.key]).map((dropDownItem, dropDownItemIdx) => <MenuItem\n                                            key={element.key + '-' + dropDownItemIdx}\n                                            value={dropDownItem.value}\n                                            primaryText={dropDownItem.label}\n                                        />)\n                                    }\n                                } else {\n                                    items = element.items.map((dropDownItem, dropDownItemIdx) => <MenuItem\n                                        key={element.key + '-' + dropDownItemIdx}\n                                        value={dropDownItem.value}\n                                        primaryText={dropDownItem.label}\n                                    />);\n                                }\n\n                                resultingElement = (\n                                    <DropDown\n                                        key={element.key}\n                                        label={element.label}\n                                        theme={element.theme}\n                                        value={currentValue}\n                                        muiProps={{\n                                            ...element.muiProps\n                                        }}\n                                        onChange={(event, index, oldValue, newValue) => this.handleFormItemChange('DropDown', element.key, oldValue, newValue, element.items[index], element)}\n                                        qflProps={{\n                                            style: {\n                                                display: 'inline-block',\n                                                width: itemWidth + '%',\n                                                paddingRight: (isMostRight ? '0px' : '4px'),\n                                                paddingLeft: (isMostLeft ? '0px' : '4px')\n                                            },\n                                            ...element.qflProps\n                                        }}\n                                    >\n                                        {items}\n                                    </DropDown>\n                                );\n                            }\n                            break;\n\n                        case 'DatePicker': {\n                            const initialValue = element.initialValue;\n                            let currentValue = this.getFormItemValue(element.key);\n                            if (currentValue === undefined) {\n                                currentValue = initialValue;\n                                if (!this.props.item) {\n                                    const curFormData = this.state.formData;\n                                    if (curFormData[element.key] !== initialValue) {\n                                        curFormData[element.key] = initialValue;\n                                        setTimeout(() => {\n                                            this.setState({\n                                                formData: curFormData\n                                            }, () => {\n                                                if (this.props.onChange) {\n                                                    this.props.onChange(this.state.formData);\n                                                }\n                                            })\n                                        }, 0);\n                                    }\n                                }\n                            }\n\n                            resultingElement = (\n                                <DatePicker\n                                    key={element.key}\n                                    value={currentValue}\n                                    theme={element.theme}\n                                    muiProps={{\n                                        tabIndex,\n                                        floatingLabelText: element.label,\n                                        width: '100%',\n                                        ...element.muiProps\n                                    }}\n                                    onChange={(oldValue, newValue) => this.handleFormItemChange('DatePicker', element.key, oldValue, newValue)}\n                                    qflProps={{\n                                        style: {\n                                            display: 'inline-block',\n                                            width: itemWidth + '%',\n                                            paddingRight: (isMostRight ? '0px' : '4px'),\n                                            paddingLeft: (isMostLeft ? '0px' : '4px')\n                                        },\n                                        ...element.qflProps\n                                    }}\n                                />\n                            );\n                        }\n                        break;\n\n                        case 'AutoComplete':\n                            if (element.items && element.items.length > 0) {\n                                const initialValue = element.initialValue;\n\n                                let currentValue = this.getFormItemValue(element.key);\n                                if (currentValue === undefined) {\n                                    currentValue = initialValue;\n                                    if (!this.props.item) {\n                                        const curFormData = this.state.formData;\n                                        if (curFormData[element.key] !== initialValue) {\n                                            curFormData[element.key] = initialValue;\n                                            setTimeout(() => {\n                                                this.setState({\n                                                    formData: curFormData\n                                                }, () => {\n                                                    if (this.props.onChange) {\n                                                        this.props.onChange(this.state.formData);\n                                                    }\n                                                })\n                                            }, 0);\n                                        }\n                                    }\n                                }\n\n                                resultingElement = (\n                                    <AutoComplete\n                                        key={element.key}\n                                        label={element.label}\n                                        theme={element.theme}\n                                        value={currentValue}\n                                        items={element.items}\n                                        muiProps={{\n                                            floatingLabelText: element.label,\n                                            ...element.muiProps\n                                        }}\n                                        onChange={(event, index, oldValue, newValue) => this.handleFormItemChange('AutoComplete', element.key, oldValue, newValue, element.items[index], element)}\n                                        qflProps={{\n                                            style: {\n                                                display: 'inline-block',\n                                                width: itemWidth + '%',\n                                                paddingRight: (isMostRight ? '0px' : '4px'),\n                                                paddingLeft: (isMostLeft ? '0px' : '4px')\n                                            },\n                                            ...element.qflProps\n                                        }}\n                                    >\n                                    </AutoComplete>\n                                );\n                            }\n                        break;\n\n                        case 'TextField':\n                        default: {\n                            const initialValue = element.initialValue;\n                            let currentValue = this.getFormItemValue(element.key);\n                            if (currentValue === undefined) {\n                                currentValue = initialValue;\n                                if (!this.props.item) {\n                                    const curFormData = this.state.formData;\n                                    if (curFormData[element.key] !== initialValue) {\n                                        curFormData[element.key] = initialValue;\n                                        setTimeout(() => {\n                                            this.setState({\n                                                formData: curFormData\n                                            }, () => {\n                                                if (this.props.onChange) {\n                                                    this.props.onChange(this.state.formData);\n                                                }\n                                            })\n                                        }, 0);\n                                    }\n                                }\n                            }\n\n                            resultingElement = (\n                                <TextField\n                                    key={element.key}\n                                    value={currentValue}\n                                    theme={element.theme}\n                                    muiProps={{\n                                        tabindex: tabIndex,\n                                        floatingLabelText: element.label,\n                                        width: '100%',\n                                        ...element.muiProps\n                                    }}\n                                    onChange={(oldValue, newValue) => this.handleFormItemChange('TextField', element.key, oldValue, newValue)}\n                                    qflProps={{\n                                        style: {\n                                            display: 'inline-block',\n                                            width: itemWidth + '%',\n                                            paddingRight: (isMostRight ? '0px' : '4px'),\n                                            paddingLeft: (isMostLeft ? '0px' : '4px')\n                                        },\n                                        ...element.qflProps\n                                    }}\n                                />\n                            );\n                        }\n                    }\n                    return resultingElement;\n                };\n\n                if (item) {\n                    const isMultiple = Array.isArray(item);\n                    let itemWidth = 100;\n                    if (isMultiple && item.length > 0) {\n                        itemWidth = (100 / item.length);\n                        return (\n                        <div\n                            key={idx}\n                            style={{ width: '100%' }}\n                        >\n                            {item.map((subItem, subIdx) => getElement(subItem, itemWidth, (30 + (idx * 10) + subIdx), subIdx === 0, subIdx === (item.length - 1)))}\n                        </div>\n                        );\n                    }\n\n                    return (\n                        <div\n                            key={idx}\n                            style={{\n                                width: '100%',\n                                paddingTop: ( item.type === 'DropDown' || item.type === 'AutoComplete' ? '22px' : '0px')\n                            }}\n                        >\n                            {getElement(item, itemWidth, (30 + (idx * 10)), true, true)}\n                        </div>\n                    );\n                }\n\n                return null;\n            })\n        }\n\n        const key = (item ? item[keyAttributeName] : null);\n\n        return (\n            <div key={key} {...qflProps} >\n                {resultingElement}\n            </div>\n        );\n    }\n}\n\nForm.childContextTypes = {\n    muiTheme: React.PropTypes.object\n};\n\nForm.defaultProps = {\n    theme: 'Default',\n    qflProps: {},\n    keyAttributeName: 'id'\n};\n\nexport default Form;\n"]}
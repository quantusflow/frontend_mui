{"version":3,"sources":["../../src/Processable/ProcessContainer.js"],"names":["ProcessContainer","props","widgetConfig","tokenData","state","modalOpen","modal","formData","canceled","processing","processable","widget","widgetName","widgetNameArr","nextTask","extensions","properties","filter","property","name","length","value","nextTaskEntity","processToken","data","formElements","formFields","map","formField","parsedType","options","formFieldWidgetNameArr","formFieldMuiPropsArr","muiProps","formProperties","formFieldProperty","JSON","parse","replace","type","initialValue","defaultValue","radioButtonMuiProps","theme","formItemTheme","sourceMuiProps","componentName","formValues","items","formValue","id","label","key","component","isModal","widgetTheme","layout","confirmLayoutArr","confirmMessageArr","confirmLayout","confirmMessage","confirmElements","element","elementObj","confirmItemTheme","isCancel","primary","secondary","render","message","fireCancel","msg","mbClient","createMessage","action","taskChannelName","publish","setState","fireProceed","token","sourceQflProps","qflProps","proceedButton","cancelButton","buttonTheme","onClick","e","handleProceed","handleCancel","onChange","onChoose","confirmData","tokenDataElement","position","zIndex","display","top","left","padding","textAlign","dialogTheme","title","actions","open","dialogMuiProps","dialogQflProps","processingComponent","margin","verticalAlign","propTypes","children","node","object","bool","processableClassName","string","modalProcessableClassName"],"mappings":"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","file":"ProcessContainer.js","sourcesContent":["import React, { PropTypes, Component } from 'react';\nimport { RaisedButton, Dialog, buildTheme, Form, Confirm } from '../';\nimport mustache from 'mustache';\nimport JSONTree from 'react-json-tree'\n\nexport default class ProcessContainer extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    processable: PropTypes.object,\n    mbClient: PropTypes.object,\n    buttonTheme: PropTypes.object,\n    dialogTheme: PropTypes.object,\n    modal: PropTypes.bool,\n    formItemTheme: PropTypes.object,\n    widgetTheme: PropTypes.object,\n    confirmItemTheme: PropTypes.object,\n    processableClassName: PropTypes.string,\n    modalProcessableClassName: PropTypes.string,\n    /**\n     * Forwarded to MaterialUI component.\n     */\n    dialogMuiProps: PropTypes.object,\n    /**\n     * Forwarded to wrapper component.\n     */\n    qflProps: PropTypes.object,\n    dialogQflProps: PropTypes.object,\n    /**\n     * Applies a given MaterialUI theme.\n     */\n    theme: PropTypes.object\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modalOpen: props.modal,\n      formData: {},\n      canceled: false,\n      processing: false\n    };\n  }\n\n  componentWillMount() {\n    const { processable } = this.props;\n    let widget = null;\n    let widgetName = null;\n    const widgetNameArr = processable.nextTask.extensions.properties.filter((property) => property.name === 'widgetName');\n\n    if (processable.nextTask && processable.nextTask.extensions && processable.nextTask.extensions.properties &&\n      widgetNameArr && widgetNameArr.length === 1) {\n      widgetName = widgetNameArr[0].value;\n      const tokenData = (processable.nextTaskEntity && processable.nextTaskEntity.processToken ? processable.nextTaskEntity.processToken.data : null);\n      switch (widgetName) {\n        case 'Form': {\n          let formElements = [];\n          if (processable.nextTask.extensions.formFields && processable.nextTask.extensions.formFields.length > 0) {\n            formElements = processable.nextTask.extensions.formFields.map((formField) => {\n              let parsedType = null;\n              const options = {};\n              let formFieldWidgetNameArr;\n              let formFieldMuiPropsArr;\n              let muiProps = {};\n\n              formFieldMuiPropsArr = formField.formProperties.filter((formFieldProperty) => formFieldProperty.name === 'muiProps');\n              if (formField.formProperties && formFieldMuiPropsArr && formFieldMuiPropsArr.length === 1 && formFieldMuiPropsArr[0].value) {\n                muiProps = JSON.parse(formFieldMuiPropsArr[0].value.replace(/\\&\\#34\\;/gi, '\"'));\n              }\n\n              switch (formField.type) {\n                case 'string':\n                  parsedType = 'TextField';\n                  break;\n                case 'boolean':\n                  parsedType = 'CheckBox';\n                  options.initialValue = null;\n                  if (formField.defaultValue !== null) {\n                    options.initialValue = (formField.defaultValue === '1');\n                  }\n                  break;\n                case 'enum':\n                  parsedType = 'DropDown';\n                  formFieldWidgetNameArr = formField.formProperties.filter((formFieldProperty) => formFieldProperty.name === 'widgetName');\n                  if (formField.formProperties && formFieldWidgetNameArr && formFieldWidgetNameArr.length === 1) {\n                    parsedType = formFieldWidgetNameArr[0].value;\n                  }\n\n                  if (parsedType === 'RadioBox') {\n                    options.radioButtonMuiProps = buildTheme({\n                      theme: this.props.formItemTheme,\n                      sourceMuiProps: {},\n                      componentName: 'RadioButton'\n                    }).muiProps;\n                  }\n\n                  if (formField.formValues && formField.formValues.length > 0) {\n                    options.items = formField.formValues.map((formValue) => {\n                      const value = formValue.id;\n                      const label = formValue.name;\n                      if (value && label) {\n                        return {\n                          value,\n                          label\n                        };\n                      }\n\n                      return null;\n                    }).filter((formValue) => (formValue !== null));\n                  }\n                  if (formField.defaultValue) {\n                    options.initialValue = formField.defaultValue;\n                  }\n                  break;\n                default:\n                  break;\n              }\n              if (parsedType) {\n                return {\n                  theme: this.props.formItemTheme,\n                  label: formField.label,\n                  type: parsedType,\n                  muiProps,\n                  key: formField.id,\n                  ...options\n                };\n              }\n              return null;\n            }).filter((formField) => (formField !== null));\n          }\n\n          widget = {\n            component: Form,\n            isModal: this.props.modal,\n            props: {\n              theme: this.props.widgetTheme,\n              layout: formElements\n            }\n          };\n          break;\n        }\n        case 'Confirm': {\n          const confirmLayoutArr = processable.nextTask.extensions.properties.filter((property) => property.name === 'confirmLayout');\n          const confirmMessageArr = processable.nextTask.extensions.properties.filter((property) => property.name === 'confirmMessage');\n          let confirmLayout = [];\n          let confirmMessage = '';\n\n          let confirmElements = [];\n          if (processable.nextTask && processable.nextTask.extensions && processable.nextTask.extensions.properties &&\n            confirmMessageArr && confirmLayoutArr.length === 1) {\n            confirmLayout = JSON.parse(confirmLayoutArr[0].value);\n\n            confirmElements = confirmLayout.map((element) => {\n              const elementObj = {\n                theme: this.props.confirmItemTheme,\n                key: element.key,\n                label: element.label,\n              };\n\n              if (element.isCancel) {\n                elementObj.muiProps = {\n                  primary: false,\n                  secondary: true\n                };\n              }\n\n              return elementObj;\n            });\n          }\n          if (processable.nextTask && processable.nextTask.extensions && processable.nextTask.extensions.properties &&\n            confirmMessageArr && confirmMessageArr.length === 1) {\n            confirmMessage = mustache.render(confirmMessageArr[0].value, tokenData);\n          }\n\n          widget = {\n            component: Confirm,\n            isModal: this.props.modal,\n            props: {\n              theme: this.props.widgetTheme,\n              layout: confirmElements,\n              message: confirmMessage\n            }\n          };\n          break;\n        }\n        default:\n          break;\n      }\n    }\n\n    if (widget) {\n      this.widgetConfig = widget;\n    }\n  }\n\n  widgetConfig = null;\n\n  handleCancel() {\n    const { processable } = this.props;\n\n    const fireCancel = () => {\n      let msg = {};\n      if (this.props.mbClient) {\n        msg = this.props.mbClient.createMessage({\n          action: 'cancel'\n        });\n      }\n\n      if (this.props.mbClient && processable.taskChannelName) {\n        this.props.mbClient.publish(processable.taskChannelName, msg);\n        this.setState({\n          canceled: true,\n          processing: true\n        });\n      }\n    };\n\n    this.setState({\n      modalOpen: false\n    }, fireCancel);\n  }\n\n  handleProceed(tokenData) {\n    const { processable } = this.props;\n\n    const fireProceed = () => {\n      const msg = this.props.mbClient.createMessage({\n        action: 'proceed',\n        token: tokenData\n      });\n\n      if (this.props.mbClient && processable.taskChannelName) {\n        this.props.mbClient.publish(processable.taskChannelName, msg);\n        this.setState({\n          canceled: false,\n          processing: true\n        });\n      }\n    };\n\n    if (this.props.modal) {\n      this.setState({\n        canceled: false,\n        modalOpen: false\n      }, fireProceed);\n    } else {\n      fireProceed();\n    }\n  }\n\n  tokenData = null;\n\n  render() {\n    const { muiProps, qflProps } = buildTheme({\n      theme: this.props.theme,\n      sourceMuiProps: this.props.muiProps,\n      sourceQflProps: this.props.qflProps,\n      componentName: 'Processable'\n    });\n\n    const { processable } = this.props;\n\n    let proceedButton = null;\n    let cancelButton = null;\n\n    let widget = null;\n    if (this.widgetConfig && this.widgetConfig.component && this.widgetConfig.component.name === 'Form') {\n      proceedButton = (\n        <RaisedButton\n          theme={this.props.buttonTheme}\n          muiProps={{\n            label: 'Weiter',\n            primary: true\n          }}\n          qflProps={{\n            onClick: (e) => {\n              this.handleProceed({ formData: this.state.formData });\n            }\n          }}\n        />\n      );\n\n      if (this.props.modal) {\n        cancelButton = (\n          <RaisedButton\n            theme={this.props.buttonTheme}\n            muiProps={{\n              label: 'Abbrechen',\n              primary: true\n            }}\n            qflProps={{\n              onClick: (e) => {\n                this.handleCancel();\n              }\n            }}\n          />\n        );\n      }\n\n      const onChange = (formData) => {\n        this.setState({\n          formData\n        });\n      };\n      widget = <this.widgetConfig.component onChange={(formData) => onChange(formData)} {...this.widgetConfig.props}/>;\n    } else if (this.widgetConfig && this.widgetConfig.component && this.widgetConfig.component.name === 'Confirm') {\n      const onChoose = (key) => {\n        const confirmData = {\n          key\n        };\n        this.handleProceed({ confirmData });\n      };\n      widget = <this.widgetConfig.component onChoose={(key) => onChoose(key)} {...this.widgetConfig.props}/>;\n    }\n\n    if (processable) {\n      let tokenDataElement = null;\n      let tokenData = null;\n      if (processable && processable.nextTaskEntity && processable.nextTaskEntity.processToken && processable.nextTaskEntity.processToken.data) {\n        tokenData = processable.nextTaskEntity.processToken.data;\n      }\n\n      if (tokenData) {\n        tokenDataElement = (\n          <div\n            style={{\n              position: 'absolute',\n              zIndex: 2,\n              display: 'inline-block',\n              top: '170px',\n              left: '10px',\n              padding: '0px'\n            }}\n          >\n            <JSONTree\n              hideRoot={true}\n              style={{\n                padding: '10px !important'\n              }}\n              data={tokenData}\n            />\n          </div>\n        );\n      }\n\n      if (processable.nextTask && !this.state.processing) {\n        if (this.props.modal) {\n          return (\n            <div\n              style={{\n                display: 'inline-block',\n                padding: '10px',\n                textAlign: 'left'\n              }}\n              {...qflProps}\n            >\n              <Dialog\n                theme={this.props.dialogTheme}\n                muiProps={{\n                  title: processable.nextTask.name,\n                  actions: [cancelButton, proceedButton],\n                  modal: true,\n                  open: this.state.modalOpen,\n                  ...this.props.dialogMuiProps\n                }}\n                qflProps={{\n                  ...this.props.dialogQflProps\n                }}\n              >\n                {widget}<br/>\n              </Dialog><br/>\n              {tokenDataElement}\n            </div>\n          );\n        }\n\n        return (\n          <div\n            style={{\n              padding: '10px'\n            }}\n            {...qflProps}\n          >\n            <h4>{processable.nextTask.name}</h4>\n            {widget}<br/>\n            {proceedButton}<br/>\n            {tokenDataElement}\n            <hr/>\n          </div>\n        );\n      }\n\n      let processingComponent = (<span>Bitte warten...</span>);\n      if (this.state.canceled) {\n        processingComponent = null;\n      }\n\n      return (\n        <div\n          style={{\n            display: 'table',\n            padding: '10px',\n            margin: '0 auto'\n          }}\n          {...qflProps}\n        >\n          <div\n            style={{\n              display: 'table-cell',\n              textAlign: 'center',\n              verticalAlign: 'middle'\n            }}\n          >\n            {processingComponent}\n          </div>\n          <hr/>\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n"]}
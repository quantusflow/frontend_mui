{"version":3,"sources":["../../../src/Processable/Table/TableOverlay.js"],"names":["TableOverlay","state","selectedMenuItems","muiTheme","applyTheme","e","oldValue","newValue","dataKey","currentSelectedMenuItems","setState","props","onSelectedMenuItemsChange","onMenuItemClicked","themeObj","menuSchema","map","section","sectionIdx","elements","menuHeaderElement","sectionName","tableOverlayStyles","menuHeaderClassName","push","marginLeft","distances","secondary","tertiary","display","menuItemClassName","items","item","itemIdx","content","isCheckBox","label","key","handleChange","isLink","to","cursor","handleItemMenuClicked","length","top","bottom","height","left","width","backgroundColor","brand","primary","propTypes","children","node","array","bool","func","object","childContextTypes","defaultProps","title","infoText"],"mappings":"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","file":"TableOverlay.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getMuiTheme } from 'material-ui/styles';\n\nimport Link from '../../Buttons/Link/Link';\nimport ToolBar from '../../Bars/ToolBar/ToolBar';\nimport CheckBox from '../../InputForms/CheckBox/CheckBox';\n\nimport { ToolbarGroup, ToolbarSeparator } from 'material-ui/Toolbar';\n\nclass TableOverlay extends Component {\n    static propTypes = {\n        children: PropTypes.node,\n        menuSchema: PropTypes.array,\n        isCheckBox: PropTypes.bool,\n        onSelectedMenuItemsChange: PropTypes.func,\n        onMenuItemClicked: PropTypes.func,\n        tableOverlayStyles: PropTypes.object\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            selectedMenuItems: {}\n        };\n    }\n\n    getChildContext() {\n        return {\n            muiTheme: getMuiTheme(applyTheme())\n        };\n    }\n    handleChange(e, oldValue, newValue, dataKey) {\n        if (oldValue !== newValue) {\n            const currentSelectedMenuItems = this.state.selectedMenuItems;\n            if (newValue) {\n                currentSelectedMenuItems[dataKey] = true;\n            } else {\n                delete currentSelectedMenuItems[dataKey];\n            }\n            this.setState({\n                selectedMenuItems: currentSelectedMenuItems\n            }, () => {\n                if (this.props.onSelectedMenuItemsChange) {\n                    this.props.onSelectedMenuItemsChange(currentSelectedMenuItems);\n                }\n            });\n        }\n    }\n\n    handleItemMenuClicked(e, dataKey) {\n        if (this.props.onMenuItemClicked) {\n            this.props.onMenuItemClicked(dataKey);\n        }\n    }\n\n    render() {\n        const themeObj = applyTheme();\n        \n        return (\n            <ToolBar theme={applyTheme('Menu')}>\n                {this.props.menuSchema.map((section, sectionIdx) => {\n                    const elements = [];\n                    let menuHeaderElement = null;\n                    if (section.sectionName) {\n                        menuHeaderElement = (<h1 className={this.props.tableOverlayStyles.menuHeaderClassName}>{section.sectionName}</h1>);\n                    }\n                    elements.push(\n                        <ToolbarGroup\n                            key={sectionIdx}\n                            firstChild={(sectionIdx === 0)}\n                            style={{\n                                marginLeft: (sectionIdx === 0 ? themeObj.distances.secondary : themeObj.distances.tertiary),\n                                display: 'block'\n                            }}\n                        >\n                            {menuHeaderElement}\n                            <span className={tableOverlayStyles.menuItemClassName}>\n                                {section.items.map((item, itemIdx) => {\n                                    let content = null;\n                                    if (item.isCheckBox === true) {\n                                        content = (\n                                            <CheckBox\n                                                key={itemIdx}\n                                                theme={applyTheme('Menu')}\n                                                muiProps={{ label: item.label }}\n                                                dataKey={item.key}\n                                                value={this.state.selectedMenuItems[item.key]}\n                                                onChange={(e, oldValue, newValue, dataKey) => {\n                                                    this.handleChange(e, oldValue, newValue, dataKey);\n                                                }}\n                                            />\n                                        );\n                                    } else if (item.isLink === true) {\n                                        let to = item.to;\n                                        if (item.to && typeof item.to === 'function') {\n                                            to = item.to();\n                                        }\n\n                                        content = <Link key={itemIdx} theme={applyTheme('Menu')} to={to} label={item.label}/>;\n                                    } else {\n                                        content = (\n                                            <span\n                                                key={itemIdx}\n                                                style={{\n                                                    cursor: 'pointer'\n                                                }}\n                                                onClick={(e) => {\n                                                    this.handleItemMenuClicked(e, item.key);\n                                                }}\n                                            >\n                                                {item.label}\n                                            </span>\n                                        );\n                                    }\n                                    return content;\n                                })}\n                            </span>\n                        </ToolbarGroup>\n                    );\n                    \n                    if (sectionIdx < this.props.menuSchema.length - 1) {\n                        elements.push(\n                            <ToolbarSeparator\n                                key={sectionIdx + '_seperator'}\n                                style={{\n                                    top: '0px',\n                                    bottom: '0px',\n                                    height: 'initial',\n                                    left: '4px',\n                                    marginLeft: '14px',\n                                    width: '2px',\n                                    display: 'block',\n                                    backgroundColor: themeObj.brand.primary\n                                }}\n                            />\n                        );\n                    }\n                    return (elements);\n                })}\n            </ToolBar>\n        );\n    }\n}\n\n\nTableOverlay.childContextTypes = {\n    muiTheme: PropTypes.object\n};\n\nTableOverlay.defaultProps = {\n    title: null,\n    infoText: null,\n    children: null,\n    primary: false,\n    isCheckBox: false\n};\n\nexport default TableOverlay;\n\n"]}